
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <IRremoteESP8266.h>

const char* ssid = "WIFI_SSID";
const char* password = "WIFI_PASSWORD";

ESP8266WebServer server(80);
IRsend irsend(0);

const int IRLED = 0;
const int StatusLED = 2;

void handleRoot() {
  digitalWrite(StatusLED, LOW);
  
  roomba_send(136);
  delay(6000);
  roomba_send(136);
  delay(6000);
  server.send(200, "text/plain", "Roomba Away!");
  digitalWrite(StatusLED, HIGH);
}

void roomba_send(int code)
{

  int length = 8;
  unsigned int raw[length*2];
  unsigned int one_pulse = 3000;
  unsigned int one_break = 1000;
  unsigned int zero_pulse = one_break;
  unsigned int zero_break = one_pulse;

  int arrayposition = 0;

  for (int counter = length-1; counter >= 0; --counter) {
    if(code & (1<<counter)) {

      raw[arrayposition] = one_pulse;
      raw[arrayposition+1] = one_break;
    }
    else {

      raw[arrayposition] = zero_pulse;
      raw[arrayposition+1] = zero_break;
    }
    arrayposition = arrayposition + 2;
  }
  for (int i = 0; i < 4; i++) {

    irsend.sendRaw(raw, 15, 39);
    delay(40);
  }

}

void handleNotFound(){
  
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET)?"GET":"POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i=0; i<server.args(); i++){
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);

}

void setup(void){

  Serial.begin(9600);
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder started");
  }

  server.on("/", handleRoot);

  server.on("/inline", [](){
    server.send(200, "text/plain", "this works as well");
  });

  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");
  pinMode(IRLED, OUTPUT);
  pinMode(StatusLED, OUTPUT);
  digitalWrite(StatusLED, HIGH);
}

void loop(void){
  server.handleClient();
}
